buildscript {
    apply from: '../build.gradle'
    repositories {
        jcenter()
        mavenCentral()
        maven {url='https://dist.creeper.host/Sponge/maven'}
        maven {url='https://repo.spongepowered.org/maven/'}
        maven {url = 'https://files.minecraftforge.net/maven'}
        maven { url = 'https://maven.minecraftforge.net' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.31'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${version}-${mc_version}"
group = "dev.tr7zw.forge.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

minecraft {

    mappings channel: 'official', version: '1.17.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('run')
            arg "-mixin.config="+archivesBaseName+".forge.mixins.json"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                transliterationlib {
                    source sourceSets.main
                }
            }
        }

    }
}

repositories{
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    jcenter()
    mavenCentral()
    maven {url = 'https://files.minecraftforge.net/maven'}
    maven { url = 'https://libraries.minecraft.net/' }
    maven {
        name = "shedaniel"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}


configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

sourceSets.main.java.srcDirs = ['src/generated/java','src/main/java']

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}" //21

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    implementation 'org.spongepowered:mixin:0.8.4'
    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'
    implementation (fg.deobf("me.shedaniel.cloth:cloth-config-forge:5.0.38"))
    extraLibs (("me.shedaniel.cloth:cloth-config-forge:5.0.37"))
    implementation project(':TRLCore')
    extraLibs project(':TRLCore')
    
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    exclude('fabric.mod.json')
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "tr7zw",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"tr7zw",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.forge.mixins.json"
        ])
    }
    from {
            configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
        }
        exclude('**/META-INF/**', 'fabric.mod.json', '**/ClothConfig.class', 'pack.mcmeta', 'icon.png')
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    add sourceSets.main, "transliterationlib.forge.refmap.json"
}